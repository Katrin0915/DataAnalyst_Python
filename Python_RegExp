{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Mod_8.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "NUMBolhTizFP",
        "vBwpQvir2DW7",
        "muBPwjAIhxxg",
        "8uZqgBhczhBL",
        "8vGwMUFDNjrK",
        "dFqlkKwbd4se"
      ],
      "toc_visible": true,
      "authorship_tag": "ABX9TyN0bcRMiXwb2ncgtWYnUcWU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Katrin0915/MyTraining/blob/main/RegExp.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Домашнее задание к лекции «Регулярные выражения и основы синтаксического разбора»"
      ],
      "metadata": {
        "id": "dXIN_y-pir5M"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Задание 1\n",
        "###Напишите функцию, которая принимает на вход строку и проверяет является ли она валидным транспортным номером (1 буква, 3 цифры, 2 буквы, 2-3 цифры). Обратите внимание, что не все буквы кириллического алфавита используются в транспортных номерах.Если номер валиден, то функция должна возвращать отдельно номер и регион."
      ],
      "metadata": {
        "id": "NUMBolhTizFP"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HhKLKl9UikdK"
      },
      "outputs": [],
      "source": [
        "import re"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = input()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jy3inIRHuIzE",
        "outputId": "1a9384d8-6107-457a-c128-f05529ee797b"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "К953ТХ163\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def car_id_valided(s):\n",
        "  '''проверяет номер автомобиля на валидность'''\n",
        "\n",
        "  car_id = re.findall(r'[АВЕКМНОРСТУХ]\\d{3}[АВЕКМНОРСТУХ]{2}\\d{2,3}', s)\n",
        "  if len(s) in [8, 9]:\n",
        "    if car_id != []:\n",
        "      number = re.findall(r'[АВЕКМНОРСТУХ]\\d{3}[АВЕКМНОРСТУХ]{2}', s)\n",
        "      region = re.findall(r'\\d{2,3}$', s)\n",
        "      result = print('Номер', number[0], 'валиден. Регион:', region[0])\n",
        "    else:\n",
        "      result = print('Номер не валиден.')\n",
        "  else:\n",
        "    result = print('Номер не валиден.')\n",
        "  return result"
      ],
      "metadata": {
        "id": "dAvAeV2KuPge"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "car_id_valided(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KAreeTWlzl8I",
        "outputId": "950e5781-97a0-450e-f377-9a569bdd9894"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Номер К953ТХ валиден. Регион: 163\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Задание 2\n",
        "###Напишите функцию, которая будет удалять все последовательные повторы слов из заданной строки при помощи регулярных выражений."
      ],
      "metadata": {
        "id": "vBwpQvir2DW7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re"
      ],
      "metadata": {
        "id": "mjf6xRmwfaLv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "some_string = input()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UU2r_4dZ2J_R",
        "outputId": "599ee079-7eca-449f-a3d8-66994f6015b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Напишите функцию функцию, которая будет будет будет будет удалять все все все все последовательные повторы слов из из из из заданной строки строки при помощи регулярных выражений\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def remove_doubles(some_string):\n",
        "  '''удаляет повторы слов'''\n",
        "  pattern = r'(\\w+)(\\s+\\1)+'\n",
        "  return re.sub(pattern, r'\\1', some_string)\n"
      ],
      "metadata": {
        "id": "qSiUHPiYeSe0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "remove_doubles(some_string)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "4wvtDD5phiOT",
        "outputId": "579a084c-02b4-4e02-b542-26f3dc0f2c6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Напишите функцию, которая будет удалять все последовательные повторы слов из заданной строки при помощи регулярных выражений'"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Задание 3\n",
        "###Напишите функцию, которая будет возвращать акроним по переданной в нее строке со словами"
      ],
      "metadata": {
        "id": "muBPwjAIhxxg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re"
      ],
      "metadata": {
        "id": "Fqw7foxnh8jg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "some_words = input()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7C4Wh45ssay6",
        "outputId": "727e6379-c6ac-4c1c-efb2-7d64be5b82e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Информационные технологии\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def make_akronim(some_words):\n",
        "  '''возвращает акроним по переданной строке'''\n",
        "  some_list = re.split(r'\\s', some_words)\n",
        "  akro = ''\n",
        "  for line in some_list:\n",
        "    pattern = re.findall(r'^\\w', line)\n",
        "    akro += pattern[0].upper()\n",
        "  return akro"
      ],
      "metadata": {
        "id": "k0-IQU6GxDdW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "make_akronim(some_words)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "PlSu-qFmzN6F",
        "outputId": "fac0026a-fe3d-486b-fc56-851c42c995ef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'ИТ'"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Задание 4\n",
        "###Напишите функцию, которая будет принимать на вход список email-адресов и выводить их распределение по доменным зонам"
      ],
      "metadata": {
        "id": "8uZqgBhczhBL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re"
      ],
      "metadata": {
        "id": "oOrvDcwSzzQP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "emails = input()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8T1WtVws0ewP",
        "outputId": "42bff8f4-ffe3-4e57-a040-3da7002c6a51"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[‘test@gmail.com, xyz@test.in, test@ya.ru, xyz@mail.ru, xyz@ya.ru’, xyz@gmail.com]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def get_domen(emails):\n",
        "  '''распределяет email-адреса и распределяет их по доменным зонам'''\n",
        "  pattern = re.findall(r'@\\w+\\.\\w{2,3}', emails)\n",
        "  my_dict = {}\n",
        "  for line in pattern:\n",
        "    domen = re.sub(r'@', r'', line)\n",
        "    if domen not in my_dict:\n",
        "      my_dict[domen] = 1\n",
        "    else:\n",
        "      my_dict[domen] += 1\n",
        "  return my_dict"
      ],
      "metadata": {
        "id": "dHtEOcvjIXG8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "get_domen(emails)\n",
        "# выводим в красивом виде\n",
        "for key, value in my_dict.items():\n",
        "  print(key, ': ', value, sep='')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UmtOISkkLHiu",
        "outputId": "7e19e5d3-5ea7-4d2c-f78d-7bae21fbead9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "gmail.com: 2\n",
            "test.in: 1\n",
            "ya.ru: 2\n",
            "mail.ru: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Задание 5 (необязательное)\n",
        "###Напишите функцию, которая будет подсчитывать сколько слов начинается на гласные, а сколько на согласные буквы в тексте (текст может быть написан как с использованием букв кириллицы, так и латиницы)."
      ],
      "metadata": {
        "id": "8vGwMUFDNjrK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re"
      ],
      "metadata": {
        "id": "9UPZNIL-QQo6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "some_text = input()"
      ],
      "metadata": {
        "id": "nPBLbL01Nri5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def count_words(some_text):\n",
        "  '''подсчитывает сколько слов начинается на гласные, а сколько на согласные буквы в тексте'''\n",
        "  pattern = re.split(r'\\s', some_text)\n",
        "  rus_glas = r'^[АаЕеЁёИиОоУуЭэЮюЯя]'\n",
        "  rus_soglas = r'^[БбВвГгДдЖжЗзКкЛлМмНнПпРрСсТтФфХхЦцЧчШшЩщ]'\n",
        "  uni_glas = r'^[AaEeUuIiOo]'\n",
        "  uni_soglas = r'^[QqWwRrTtYyPpSsDdFfGgHhJjKkLlZzXxCcVvBbNnMm]'\n",
        "  glas_count = 0\n",
        "  soglas_count = 0\n",
        "  for line in pattern:\n",
        "    if re.findall(rus_soglas, line) != [] or re.findall(uni_soglas, line) != []:\n",
        "      soglas_count += 1\n",
        "    elif re.findall(rus_glas, line) != [] or re.findall(uni_glas, line) != []:\n",
        "      glas_count += 1\n",
        "  return {'Слов на гласные буквы:': glas_count, 'Слов на согласные буквы:': soglas_count}"
      ],
      "metadata": {
        "id": "accE45KlP3Dg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for key, value in count_words(some_text).items():\n",
        "  print(key, value)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7tjRY17AcmF2",
        "outputId": "87ec5324-ae31-4dd9-d994-d322cb2e8b6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Слов на гласные буквы: 9\n",
            "Слов на согласные буквы: 21\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Задание 6 (необязательное)\n",
        "###Напишите функцию, которая будет проверять номер сотового телефона на валидность, если он валиден, то переводить его в формат:\n",
        "####+7-xxx-xxx-xx-xx"
      ],
      "metadata": {
        "id": "dFqlkKwbd4se"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import re"
      ],
      "metadata": {
        "id": "yEBxm6Y7wbO7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "phone = input()"
      ],
      "metadata": {
        "id": "8VMXM1OPwgJP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4c6b921-49bc-4c33-b9ba-c19399a4ad71"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "423-555-55-5555\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def new_format_phone(phone):\n",
        "  '''проверяет номер сотового телефона на валидность'''\n",
        "  numbers = re.findall(r'\\d', phone)\n",
        "  if len(numbers) == 11 and numbers[0] in ('7','8') and numbers[1] == '9':\n",
        "    new_phone = '+7-9'\n",
        "    for i in range(2, 11):\n",
        "      if i in (2, 3, 5, 6, 8, 10):\n",
        "        new_phone += numbers[i]\n",
        "      elif i in (4, 7, 9):\n",
        "        new_phone += '-' + numbers[i]\n",
        "      result = new_phone\n",
        "  else:\n",
        "    result = 'Номер не валиден'\n",
        "  return result"
      ],
      "metadata": {
        "id": "SAbloDTRQpAk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new_format_phone(phone)"
      ],
      "metadata": {
        "id": "YKEOczpCd_A8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "b5595c1b-9ff0-4fb4-d4e5-b4f7b50045f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'Номер не валиден'"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    }
  ]
}
