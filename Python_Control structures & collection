{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Mod_3.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "ngRB2ENb3W1S",
        "W4TPFdun2xeB",
        "kocQ6fYnOchO"
      ],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Домашнее задание к лекции «Управляющие конструкции и коллекции» часть 2"
      ],
      "metadata": {
        "id": "81wTdW4_2ufV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Задание 1\n",
        "\n",
        "Дана переменная, в которой хранится словарь, содержащий гео-метки для каждого пользователя (пример структуры данных приведен ниже). Вам необходимо написать программу, которая выведет на экран множество уникальных гео-меток всех пользователей.\n",
        "\n",
        "Пример работы программы:\n",
        "\n",
        "ids = {‘user1’: [213, 213, 213, 15, 213],\n",
        "‘user2’: [54, 54, 119, 119, 119],\n",
        "‘user3’: [213, 98, 98, 35]}\n",
        "Результат: {98, 35, 15, 213, 54, 119}"
      ],
      "metadata": {
        "id": "T0Wvo_Sm22mT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ids = {'user1': [213, 213, 213, 15, 213], \n",
        "       'user2': [54, 54, 119, 119, 119],\n",
        "       'user3': [213, 98, 98, 35]}\n",
        "geo = list(ids.values())\n",
        "l = len(geo)\n",
        "sumgeo = []\n",
        "for i in range(l):\n",
        "  sumgeo = sumgeo + geo[i]\n",
        "allgeo = set(sumgeo)\n",
        "print(allgeo)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zQe7WQEA5DJz",
        "outputId": "cebf0456-1f44-413f-8188-cb128d39b38f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{98, 35, 15, 213, 54, 119}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Задание 2\n",
        "Дана переменная, в которой хранится список поисковых запросов пользователя (пример структуры данных приведен ниже). Вам необходимо написать программу, которая выведет на экран распределение количества слов в запросах в требуемом виде.\n",
        "\n",
        "Пример работы программы:\n",
        "\n",
        "queries = [\n",
        "‘смотреть сериалы онлайн’,\n",
        "‘новости спорта’,\n",
        "‘афиша кино’,\n",
        "‘курс доллара’,\n",
        "‘сериалы этим летом’,\n",
        "‘курс по питону’,\n",
        "‘сериалы про спорт’,\n",
        "]\n",
        "Результат:\n",
        "\n",
        "Поисковых запросов, содержащих 2 слов(а): 42.86%\n",
        "Поисковых запросов, содержащих 3 слов(а): 57.14%"
      ],
      "metadata": {
        "id": "ngRB2ENb3W1S"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "queries = [ 'смотреть сериалы онлайн', \n",
        "           'новости спорта',\n",
        "           'афиша кино',\n",
        "           'курс доллара',\n",
        "           'сериалы этим летом',\n",
        "           'курс по питону',\n",
        "           'сериалы про спорт', ]\n",
        "query2w, query3w = 0, 0\n",
        "for i in range(len(queries)):\n",
        "  if len(queries[i].split(' ')) == 2:\n",
        "    query2w = query2w + 1\n",
        "  elif len(queries[i].split(' ')) == 3:\n",
        "    query3w = query3w + 1\n",
        "print('Поисковых запросов, содержащих 2 слов(а):', round(query2w / len(queries) * 100, 2), '%')\n",
        "print('Поисковых запросов, содержащих 3 слов(а):', round(query3w / len(queries) * 100, 2), '%')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w3x-HeQKjCuF",
        "outputId": "1e591d2d-5b89-48cc-8b8c-a7f4fc461080"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Поисковых запросов, содержащих 2 слов(а): 42.86 %\n",
            "Поисковых запросов, содержащих 3 слов(а): 57.14 %\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Задание 3\n",
        "\n",
        "Дана переменная, в которой хранится информация о затратах и доходе рекламных кампаний по различным источникам. Необходимо дополнить исходную структуру показателем ROI, который рассчитаем по формуле: (revenue / cost - 1) * 100\n",
        "\n",
        "Пример работы программы:\n",
        "\n",
        "results = {\n",
        "‘vk’: {‘revenue’: 103, ‘cost’: 98},\n",
        "‘yandex’: {‘revenue’: 179, ‘cost’: 153},\n",
        "‘facebook’: {‘revenue’: 103, ‘cost’: 110},\n",
        "‘adwords’: {‘revenue’: 35, ‘cost’: 34},\n",
        "‘twitter’: {‘revenue’: 11, ‘cost’: 24},\n",
        "}\n",
        "Результат:\n",
        "\n",
        "{‘adwords’: {‘ROI’: 2.94, ‘cost’: 34, ‘revenue’: 35},\n",
        "‘facebook’: {‘ROI’: -6.36, ‘cost’: 110, ‘revenue’: 103},\n",
        "‘twitter’: {‘ROI’: -54.17, ‘cost’: 24, ‘revenue’: 11},\n",
        "‘vk’: {‘ROI’: 5.1, ‘cost’: 98, ‘revenue’: 103},\n",
        "‘yandex’: {‘ROI’: 16.99, ‘cost’: 153, ‘revenue’: 179}}"
      ],
      "metadata": {
        "id": "eSDhX4kB3Ab0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "results = { 'vk': {'revenue': 103, 'cost': 98},\n",
        "          'yandex': {'revenue': 179, 'cost': 153},\n",
        "          'facebook': {'revenue': 103, 'cost': 110},\n",
        "          'adwords': {'revenue': 35, 'cost': 34},\n",
        "          'twitter': {'revenue': 11, 'cost': 24}}\n",
        "for media, info in results.items():\n",
        "  info['ROI'] = round((info['revenue'] / info['cost'] - 1) * 100, 2)\n",
        "print(results)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VFvZ0QFA28-r",
        "outputId": "98623f9f-486c-4baf-f8db-47dc6b69e1be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'vk': {'revenue': 103, 'cost': 98, 'ROI': 5.1}, 'yandex': {'revenue': 179, 'cost': 153, 'ROI': 16.99}, 'facebook': {'revenue': 103, 'cost': 110, 'ROI': -6.36}, 'adwords': {'revenue': 35, 'cost': 34, 'ROI': 2.94}, 'twitter': {'revenue': 11, 'cost': 24, 'ROI': -54.17}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Задание 4\n",
        "\n",
        "Дана переменная, в которой хранится статистика рекламных каналов по объемам продаж (пример структуры данных приведен ниже). Напишите программу, которая возвращает название канала с максимальным объемом продаж.\n",
        "\n",
        "Пример работы программы:\n",
        "\n",
        "stats = {‘facebook’: 55, ‘yandex’: 115, ‘vk’: 120, ‘google’: 99, ‘email’: 42, ‘ok’: 98}\n",
        "\n",
        "Результат: Максимальный объем продаж на рекламном канале: vk"
      ],
      "metadata": {
        "id": "W4TPFdun2xeB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "stats = {'facebook': 55,\n",
        "         'yandex': 115,\n",
        "         'vk': 120,\n",
        "         'google': 99,\n",
        "         'email': 42, \n",
        "         'ok': 98}\n",
        "nmax = 0\n",
        "for media, sales in stats.items():\n",
        "   if sales > nmax:\n",
        "     nmax = sales\n",
        "for media, sales in stats.items():\n",
        "  if sales == nmax:\n",
        "    print('Максимальный объем продаж на рекламном канале:', media)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3L66ognDKZGd",
        "outputId": "18644ab5-d840-4a1c-91e0-5713a5990e2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Максимальный объем продаж на рекламном канале: vk\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Задание 5 (необязательно)\n",
        "\n",
        "Дан список произвольной длины. Необходимо написать код, который на основе исходного списка составит словарь такого уровня вложенности, какова длина исхондого списка.\n",
        "\n",
        "Примеры работы программы:\n",
        "\n",
        "my_list = [‘2018-01-01’, ‘yandex’, ‘cpc’, 100]\n",
        "\n",
        "Результат: {‘2018-01-01’: {‘yandex’: {‘cpc’: 100}}}\n",
        "\n",
        "my_list = [‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’]\n",
        "\n",
        "Результат: {‘a’: {‘b’: {‘c’: {‘d’: {‘e’: ‘f’}}}}}"
      ],
      "metadata": {
        "id": "kocQ6fYnOchO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "my_list = ['a', 'b', 'c', 'd', 'e', 'f']\n",
        "l = len(my_list) - 1\n",
        "d = {my_list[l-1]: my_list[l]}\n",
        "for i in range(l-2, -1, -1):\n",
        "  x = {my_list[i]: d}\n",
        "  d = x\n",
        "d\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "45xMsnO0PtaM",
        "outputId": "fc07f99b-fa6d-437b-83aa-01cfa40f530b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'a': {'b': {'c': {'d': {'e': 'f'}}}}}"
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "my_list = ['2018-01-01', 'yandex', 'cpc', 100]\n",
        "l = len(my_list) - 1\n",
        "d = {my_list[l-1]: my_list[l]}\n",
        "for i in range(l-2, -1, -1):\n",
        "  x = {my_list[i]: d}\n",
        "  d = x\n",
        "d\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WHOmE198-jJj",
        "outputId": "b36ae1ca-4f32-43a9-a80c-ec8cf47c4d38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'2018-01-01': {'yandex': {'cpc': 100}}}"
            ]
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Задание 6 (необязательно)\n",
        "\n",
        "Дана книга рецептов с информацией о том, сколько ингредиентов нужно для приготовления блюда в расчете на одну порцию (пример данных представлен ниже).\n",
        "Напишите программу, которая будет запрашивать у пользователя количество порций для приготовления этих блюд и отображать информацию о суммарном количестве требуемых ингредиентов в указанном виде.\n",
        "\n",
        "Результат:\n",
        "\n",
        "Сыр: 210 гр\n",
        "Томаты: 6 шт\n",
        "Огурцы: 60 гр\n",
        "Маслины: 30 гр\n",
        "Оливковое Масло: 60 мл\n",
        "Салат: 30 гр\n",
        "Перец: 60 гр\n",
        "Колбаса: 90 гр\n",
        "Бекон: 90 гр\n",
        "Оливки: 30 гр\n",
        "Томаты: 60 гр\n",
        "Тесто: 300 гр\n",
        "Лимон: 3 шт\n",
        "Вода: 600 мл\n",
        "Сахар: 30 гр\n",
        "Лайм: 60 гр"
      ],
      "metadata": {
        "id": "MbkHYKzn-ylU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cook_book = { 'салат': [\n",
        "                        {'ingridient_name': 'сыр', 'quantity': 50, 'measure': 'гр'},\n",
        "                        {'ingridient_name': 'томаты', 'quantity': 2, 'measure': 'шт'},\n",
        "                        {'ingridient_name': 'огурцы', 'quantity': 20, 'measure': 'гр'},\n",
        "                        {'ingridient_name': 'маслины', 'quantity': 10, 'measure': 'гр'},\n",
        "                        {'ingridient_name': 'оливковое масло', 'quantity': 20, 'measure': 'мл'},\n",
        "                        {'ingridient_name': 'салат', 'quantity': 10, 'measure': 'гр'}, \n",
        "                        {'ingridient_name': 'перец', 'quantity': 20, 'measure': 'гр'} \n",
        "                        ],\n",
        "             'пицца': [ \n",
        "                       {'ingridient_name': 'сыр', 'quantity': 20, 'measure': 'гр'},\n",
        "                       {'ingridient_name': 'колбаса', 'quantity': 30, 'measure': 'гр'},\n",
        "                       {'ingridient_name': 'бекон', 'quantity': 30, 'measure': 'гр'},\n",
        "                       {'ingridient_name': 'оливки', 'quantity': 10, 'measure': 'гр'},\n",
        "                       {'ingridient_name': 'томаты', 'quantity': 20, 'measure': 'гр'},\n",
        "                       {'ingridient_name': 'тесто', 'quantity': 100, 'measure': 'гр'},\n",
        "                       ], \n",
        "             'лимонад': [\n",
        "                         {'ingridient_name': 'лимон', 'quantity': 1, 'measure': 'шт'},\n",
        "                         {'ingridient_name': 'вода', 'quantity': 200, 'measure': 'мл'}, \n",
        "                         {'ingridient_name': 'сахар', 'quantity': 10, 'measure': 'гр'},\n",
        "                         {'ingridient_name': 'лайм', 'quantity': 20, 'measure': 'гр'}, \n",
        "                         ]\n",
        "              }\n",
        "print('Введите количество порций:')\n",
        "n = int(input())\n",
        "list1 = list(cook_book.values())\n",
        "list2 = list()\n",
        "list3 = list()\n",
        "list4 = list()\n",
        "for x in range(len(list1)):\n",
        "  for i in range(len(list1[x])):\n",
        "    list2.append(list1[x][i]['ingridient_name'])\n",
        "for x in range(len(list1)):\n",
        "  for i in range(len(list1[x])):\n",
        "    list3.append(list1[x][i]['quantity'] * n)\n",
        "for x in range(len(list1)):\n",
        "  for i in range(len(list1[x])):\n",
        "    list4.append(list1[x][i]['measure'])\n",
        "print(list2)\n",
        "print(list3)\n",
        "print(list4)\n",
        "dict(zip(list2, list3))\n",
        "# к сожалению не смогла придумать как суммировать значения дубликатов и решить задание до конца"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IkZjw5hTCt6k",
        "outputId": "a9eaa46d-4ed8-4186-dd64-499fc3e0fa5c"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Введите количество порций:\n",
            "1\n",
            "['сыр', 'томаты', 'огурцы', 'маслины', 'оливковое масло', 'салат', 'перец', 'сыр', 'колбаса', 'бекон', 'оливки', 'томаты', 'тесто', 'лимон', 'вода', 'сахар', 'лайм']\n",
            "[50, 2, 20, 10, 20, 10, 20, 20, 30, 30, 10, 20, 100, 1, 200, 10, 20]\n",
            "['гр', 'шт', 'гр', 'гр', 'мл', 'гр', 'гр', 'гр', 'гр', 'гр', 'гр', 'гр', 'гр', 'шт', 'мл', 'гр', 'гр']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'бекон': 30,\n",
              " 'вода': 200,\n",
              " 'колбаса': 30,\n",
              " 'лайм': 20,\n",
              " 'лимон': 1,\n",
              " 'маслины': 10,\n",
              " 'огурцы': 20,\n",
              " 'оливки': 10,\n",
              " 'оливковое масло': 20,\n",
              " 'перец': 20,\n",
              " 'салат': 10,\n",
              " 'сахар': 10,\n",
              " 'сыр': 20,\n",
              " 'тесто': 100,\n",
              " 'томаты': 20}"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    }
  ]
}
