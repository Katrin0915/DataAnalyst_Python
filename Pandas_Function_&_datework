{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Katrin0915/MyTraining/blob/main/Pandas_Function_%26_datework\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "398218af",
      "metadata": {
        "id": "398218af"
      },
      "source": [
        "# Домашнее задание «Функции и работа с данными»"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e5af8be4",
      "metadata": {
        "id": "e5af8be4"
      },
      "source": [
        "# # Задание 1\n",
        "### Напишите функцию, которая классифицирует фильмы из материалов занятия по следующим правилам:\n",
        "#### - оценка 2 и меньше - низкий рейтинг\n",
        "#### - оценка 4 и меньше - средний рейтинг\n",
        "#### - оценка 4.5 и 5 - высокий рейтинг\n",
        "\n",
        "### Результат классификации запишите в столбец class"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8858a308",
      "metadata": {
        "id": "8858a308"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3aaf61f9",
      "metadata": {
        "id": "3aaf61f9",
        "outputId": "4d1392c3-fe72-426e-d931-b5f9f88da28b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>userId</th>\n",
              "      <th>movieId</th>\n",
              "      <th>rating</th>\n",
              "      <th>timestamp</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1260759144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1029</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1260759179</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1061</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1260759182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1129</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1260759185</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1172</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1260759205</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   userId  movieId  rating   timestamp\n",
              "0       1       31     2.5  1260759144\n",
              "1       1     1029     3.0  1260759179\n",
              "2       1     1061     3.0  1260759182\n",
              "3       1     1129     2.0  1260759185\n",
              "4       1     1172     4.0  1260759205"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ratings = pd.read_csv('D:\\Блок_7_Numpy, Pandas\\ml-latest-small\\\\ratings.csv')\n",
        "ratings.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "213cd4b1",
      "metadata": {
        "id": "213cd4b1",
        "outputId": "0e26c378-c50c-40a8-b6d6-73e80c16b973"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 100004 entries, 0 to 100003\n",
            "Data columns (total 4 columns):\n",
            " #   Column     Non-Null Count   Dtype  \n",
            "---  ------     --------------   -----  \n",
            " 0   userId     100004 non-null  int64  \n",
            " 1   movieId    100004 non-null  int64  \n",
            " 2   rating     100004 non-null  float64\n",
            " 3   timestamp  100004 non-null  int64  \n",
            "dtypes: float64(1), int64(3)\n",
            "memory usage: 3.1 MB\n"
          ]
        }
      ],
      "source": [
        "ratings.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d7693cb5",
      "metadata": {
        "id": "d7693cb5"
      },
      "outputs": [],
      "source": [
        "def class_rate(rating):\n",
        "    '''классификатор фильмов по оценкам'''\n",
        "    if rating <= 2:\n",
        "        return 'low rating'\n",
        "    elif rating < 4.5:  ## в условии задания оценки <4 - средний, а 4.5 и 5 - высокий; непонятно куда отнести значения 4< x <4.5\n",
        "        return 'middle rating'\n",
        "    elif rating >= 4.5:\n",
        "        return 'high rating'\n",
        "    "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "24bfe8be",
      "metadata": {
        "id": "24bfe8be",
        "outputId": "3b98c9ff-f43a-48f2-aac0-18e41e099df2"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>userId</th>\n",
              "      <th>movieId</th>\n",
              "      <th>rating</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>2.5</td>\n",
              "      <td>1260759144</td>\n",
              "      <td>middle rating</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1029</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1260759179</td>\n",
              "      <td>middle rating</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>1061</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1260759182</td>\n",
              "      <td>middle rating</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1129</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1260759185</td>\n",
              "      <td>low rating</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>1172</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1260759205</td>\n",
              "      <td>middle rating</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   userId  movieId  rating   timestamp          class\n",
              "0       1       31     2.5  1260759144  middle rating\n",
              "1       1     1029     3.0  1260759179  middle rating\n",
              "2       1     1061     3.0  1260759182  middle rating\n",
              "3       1     1129     2.0  1260759185     low rating\n",
              "4       1     1172     4.0  1260759205  middle rating"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ratings['class'] = ratings['rating'].apply(class_rate)\n",
        "ratings.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "78822160",
      "metadata": {
        "id": "78822160"
      },
      "source": [
        "# # Задание 2\n",
        "#### Используем файл keywords.csv.\n",
        "\n",
        "### Необходимо написать гео-классификатор, который каждой строке сможет выставить географическую принадлежность определенному региону. Т. е. если поисковый запрос содержит название города региона, то в столбце ‘region’ пишется название этого региона. Если поисковый запрос не содержит названия города, то ставим ‘undefined’"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6fae20db",
      "metadata": {
        "id": "6fae20db",
        "outputId": "bbb4f31d-0622-4b98-8082-c36e11709d44"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>keyword</th>\n",
              "      <th>shows</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>99990</th>\n",
              "      <td>сколько лет обаме</td>\n",
              "      <td>3799</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99991</th>\n",
              "      <td>сергей жорин</td>\n",
              "      <td>4056</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99992</th>\n",
              "      <td>остаться в живых 5 сезон</td>\n",
              "      <td>3696</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99993</th>\n",
              "      <td>петростат официальный сайт</td>\n",
              "      <td>3634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99994</th>\n",
              "      <td>мк газета свежий номер</td>\n",
              "      <td>3750</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99995</th>\n",
              "      <td>эльдорадо старый оскол</td>\n",
              "      <td>3705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99996</th>\n",
              "      <td>frigate для firefox</td>\n",
              "      <td>3630</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99997</th>\n",
              "      <td>укрсиб</td>\n",
              "      <td>3630</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99998</th>\n",
              "      <td>погода в ялте на неделю</td>\n",
              "      <td>3688</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99999</th>\n",
              "      <td>ггму</td>\n",
              "      <td>3630</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                          keyword  shows\n",
              "99990           сколько лет обаме   3799\n",
              "99991                сергей жорин   4056\n",
              "99992    остаться в живых 5 сезон   3696\n",
              "99993  петростат официальный сайт   3634\n",
              "99994      мк газета свежий номер   3750\n",
              "99995      эльдорадо старый оскол   3705\n",
              "99996         frigate для firefox   3630\n",
              "99997                      укрсиб   3630\n",
              "99998     погода в ялте на неделю   3688\n",
              "99999                        ггму   3630"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df = pd.read_csv('D:\\Блок_7_Numpy, Pandas\\ml-latest-small\\\\keywords.csv')\n",
        "df.tail(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "775619d8",
      "metadata": {
        "id": "775619d8"
      },
      "outputs": [],
      "source": [
        "def geo_class(keyword):\n",
        "    '''выставляет географическую принадлежность определенному региону'''\n",
        "    \n",
        "    geo_data = {\n",
        "        'Центр': ['москва', 'тула', 'ярославль', 'рязань', 'тверь'],\n",
        "\n",
        "        'Северо-Запад': ['петербург', 'псков', 'мурманск', 'архангельск'],\n",
        "\n",
        "        'Дальний Восток': ['владивосток', 'сахалин', 'хабаровск'],\n",
        "    \n",
        "        'Поволжье': ['самара', 'ульяновск', 'сартов', 'волгоград']\n",
        "    \n",
        "    }\n",
        "    \n",
        "    for key, value in geo_data.items():\n",
        "        if keyword in value:\n",
        "            return key\n",
        "        else:\n",
        "            return 'undefined'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c55c2df3",
      "metadata": {
        "id": "c55c2df3"
      },
      "outputs": [],
      "source": [
        "df['region'] = df['keyword'].apply(geo_class)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2de810ec",
      "metadata": {
        "id": "2de810ec",
        "outputId": "4e7e3658-65b5-406b-9f49-00df578b76f6"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>keyword</th>\n",
              "      <th>shows</th>\n",
              "      <th>region</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1259</th>\n",
              "      <td>москва</td>\n",
              "      <td>153050</td>\n",
              "      <td>Центр</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6075</th>\n",
              "      <td>ярославль</td>\n",
              "      <td>41720</td>\n",
              "      <td>Центр</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9588</th>\n",
              "      <td>рязань</td>\n",
              "      <td>28357</td>\n",
              "      <td>Центр</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10878</th>\n",
              "      <td>тверь</td>\n",
              "      <td>25532</td>\n",
              "      <td>Центр</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11785</th>\n",
              "      <td>тула</td>\n",
              "      <td>23898</td>\n",
              "      <td>Центр</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         keyword   shows region\n",
              "1259      москва  153050  Центр\n",
              "6075   ярославль   41720  Центр\n",
              "9588      рязань   28357  Центр\n",
              "10878      тверь   25532  Центр\n",
              "11785       тула   23898  Центр"
            ]
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df[ df.region != 'undefined']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f1697e92",
      "metadata": {
        "id": "f1697e92",
        "outputId": "1a28a06a-7f7e-49ef-b2c7-bc08081f7745"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>keyword</th>\n",
              "      <th>shows</th>\n",
              "      <th>region</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>вк</td>\n",
              "      <td>64292779</td>\n",
              "      <td>undefined</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>одноклассники</td>\n",
              "      <td>63810309</td>\n",
              "      <td>undefined</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>порно</td>\n",
              "      <td>41747114</td>\n",
              "      <td>undefined</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ютуб</td>\n",
              "      <td>39995567</td>\n",
              "      <td>undefined</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>вконтакте</td>\n",
              "      <td>21014195</td>\n",
              "      <td>undefined</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>одноклассники моя страница</td>\n",
              "      <td>19976138</td>\n",
              "      <td>undefined</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>майл</td>\n",
              "      <td>15144673</td>\n",
              "      <td>undefined</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>авито</td>\n",
              "      <td>14786593</td>\n",
              "      <td>undefined</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>переводчик</td>\n",
              "      <td>14453469</td>\n",
              "      <td>undefined</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>яндекс</td>\n",
              "      <td>13344734</td>\n",
              "      <td>undefined</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      keyword     shows     region\n",
              "0                          вк  64292779  undefined\n",
              "1               одноклассники  63810309  undefined\n",
              "2                       порно  41747114  undefined\n",
              "3                        ютуб  39995567  undefined\n",
              "4                   вконтакте  21014195  undefined\n",
              "5  одноклассники моя страница  19976138  undefined\n",
              "6                        майл  15144673  undefined\n",
              "7                       авито  14786593  undefined\n",
              "8                  переводчик  14453469  undefined\n",
              "9                      яндекс  13344734  undefined"
            ]
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1c4bf31a",
      "metadata": {
        "id": "1c4bf31a"
      },
      "source": [
        "# # Задание 3 (бонусное)\n",
        "\n",
        "### Есть мнение, что “раньше снимали настоящее кино, не то что сейчас”. Ваша задача проверить это утверждение, используя файлы с рейтингами фильмов из прошлого домашнего занятия (файл movies.csv и ratings.csv из базы grouplens.org.../movielens). Т. е. проверить верно ли, что с ростом года выпуска фильма его средний рейтинг становится ниже."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c3213b04",
      "metadata": {
        "id": "c3213b04"
      },
      "source": [
        "#### 1. В переменную years запишите список из всех годов с 1950 по 2010.\n",
        "\n",
        "#### 2. Напишите функцию production_year, которая каждой строке из названия фильма выставляет год выпуска. Не все названия фильмов содержат год выпуска в одинаковом формате, поэтому используйте следующий алгоритм:\n",
        "\n",
        "#### a) для каждой строки пройдите по всем годам списка years\n",
        "#### б) если номер года присутствует в названии фильма, то функция возвращает этот год как год выпуска\n",
        "#### в) если ни один из номеров года списка years не встретился в названии фильма, то возвращается 1900 год\n",
        "\n",
        "#### 3) Запишите год выпуска фильма по алгоритму пункта 2 в новый столбец ‘year’\n",
        "\n",
        "#### 4) Посчитайте средний рейтинг всех фильмов для каждого значения столбца ‘year’ и отсортируйте результат по убыванию рейтинга"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b2aa32b1",
      "metadata": {
        "id": "b2aa32b1"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import re"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bd52c150",
      "metadata": {
        "id": "bd52c150",
        "outputId": "0e0bf98c-b20e-4f2b-aacd-08c4fc89f9f7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,\n",
              "       1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,\n",
              "       1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,\n",
              "       1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993,\n",
              "       1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n",
              "       2005, 2006, 2007, 2008, 2009, 2010])"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# пункт 1\n",
        "years = np.arange(1950, 2011, 1)\n",
        "years"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c0fec8e3",
      "metadata": {
        "id": "c0fec8e3",
        "outputId": "0004acb8-39b0-4e20-b6cb-8e4bad2538aa"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movieId</th>\n",
              "      <th>title</th>\n",
              "      <th>genres</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Toy Story (1995)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Jumanji (1995)</td>\n",
              "      <td>Adventure|Children|Fantasy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Grumpier Old Men (1995)</td>\n",
              "      <td>Comedy|Romance</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Waiting to Exhale (1995)</td>\n",
              "      <td>Comedy|Drama|Romance</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Father of the Bride Part II (1995)</td>\n",
              "      <td>Comedy</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   movieId                               title  \\\n",
              "0        1                    Toy Story (1995)   \n",
              "1        2                      Jumanji (1995)   \n",
              "2        3             Grumpier Old Men (1995)   \n",
              "3        4            Waiting to Exhale (1995)   \n",
              "4        5  Father of the Bride Part II (1995)   \n",
              "\n",
              "                                        genres  \n",
              "0  Adventure|Animation|Children|Comedy|Fantasy  \n",
              "1                   Adventure|Children|Fantasy  \n",
              "2                               Comedy|Romance  \n",
              "3                         Comedy|Drama|Romance  \n",
              "4                                       Comedy  "
            ]
          },
          "execution_count": 34,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "movies = pd.read_csv('D:\\Блок_7_Numpy, Pandas\\ml-latest-small\\\\movies.csv')\n",
        "movies.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dfbf2a46",
      "metadata": {
        "id": "dfbf2a46"
      },
      "outputs": [],
      "source": [
        "# пункт 2\n",
        "def production_year(title):\n",
        "    '''выставляет фильму год выпуска'''\n",
        "    year = '1900'\n",
        "    for value in years:\n",
        "        if str(value) in title:\n",
        "            year = str(value)\n",
        "    return year"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cce231fd",
      "metadata": {
        "id": "cce231fd",
        "outputId": "690ad1fd-4570-48cf-fb58-5653c28b94be"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movieId</th>\n",
              "      <th>title</th>\n",
              "      <th>genres</th>\n",
              "      <th>year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9025</th>\n",
              "      <td>145150</td>\n",
              "      <td>The Dressmaker (2015)</td>\n",
              "      <td>Comedy|Drama|Thriller</td>\n",
              "      <td>1900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9026</th>\n",
              "      <td>145307</td>\n",
              "      <td>Strictly Business (1991)</td>\n",
              "      <td>Comedy|Romance</td>\n",
              "      <td>1991</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9027</th>\n",
              "      <td>145775</td>\n",
              "      <td>Rubble Kings (2015)</td>\n",
              "      <td>Documentary</td>\n",
              "      <td>1900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9028</th>\n",
              "      <td>145839</td>\n",
              "      <td>Concussion (2015)</td>\n",
              "      <td>Drama</td>\n",
              "      <td>1900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9029</th>\n",
              "      <td>145935</td>\n",
              "      <td>Peanuts Movie, The (2015)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy</td>\n",
              "      <td>1900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9120</th>\n",
              "      <td>162672</td>\n",
              "      <td>Mohenjo Daro (2016)</td>\n",
              "      <td>Adventure|Drama|Romance</td>\n",
              "      <td>1900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9121</th>\n",
              "      <td>163056</td>\n",
              "      <td>Shin Godzilla (2016)</td>\n",
              "      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n",
              "      <td>1900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9122</th>\n",
              "      <td>163949</td>\n",
              "      <td>The Beatles: Eight Days a Week - The Touring Y...</td>\n",
              "      <td>Documentary</td>\n",
              "      <td>1900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9123</th>\n",
              "      <td>164977</td>\n",
              "      <td>The Gay Desperado (1936)</td>\n",
              "      <td>Comedy</td>\n",
              "      <td>1900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9124</th>\n",
              "      <td>164979</td>\n",
              "      <td>Women of '69, Unboxed</td>\n",
              "      <td>Documentary</td>\n",
              "      <td>1900</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      movieId                                              title  \\\n",
              "9025   145150                              The Dressmaker (2015)   \n",
              "9026   145307                           Strictly Business (1991)   \n",
              "9027   145775                                Rubble Kings (2015)   \n",
              "9028   145839                                  Concussion (2015)   \n",
              "9029   145935                          Peanuts Movie, The (2015)   \n",
              "...       ...                                                ...   \n",
              "9120   162672                                Mohenjo Daro (2016)   \n",
              "9121   163056                               Shin Godzilla (2016)   \n",
              "9122   163949  The Beatles: Eight Days a Week - The Touring Y...   \n",
              "9123   164977                           The Gay Desperado (1936)   \n",
              "9124   164979                              Women of '69, Unboxed   \n",
              "\n",
              "                                   genres  year  \n",
              "9025                Comedy|Drama|Thriller  1900  \n",
              "9026                       Comedy|Romance  1991  \n",
              "9027                          Documentary  1900  \n",
              "9028                                Drama  1900  \n",
              "9029  Adventure|Animation|Children|Comedy  1900  \n",
              "...                                   ...   ...  \n",
              "9120              Adventure|Drama|Romance  1900  \n",
              "9121      Action|Adventure|Fantasy|Sci-Fi  1900  \n",
              "9122                          Documentary  1900  \n",
              "9123                               Comedy  1900  \n",
              "9124                          Documentary  1900  \n",
              "\n",
              "[100 rows x 4 columns]"
            ]
          },
          "execution_count": 83,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# пункт 3\n",
        "movies['year'] = movies['title'].apply(production_year)\n",
        "movies.tail(100)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "874e71e4",
      "metadata": {
        "id": "874e71e4",
        "outputId": "a781d50d-978f-4c56-e28f-3a917845c698"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movieId</th>\n",
              "      <th>title</th>\n",
              "      <th>genres</th>\n",
              "      <th>year</th>\n",
              "      <th>userId</th>\n",
              "      <th>rating</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Toy Story (1995)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n",
              "      <td>1995</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.518667e+08</td>\n",
              "      <td>middle rating</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Toy Story (1995)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n",
              "      <td>1995</td>\n",
              "      <td>9.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>9.386292e+08</td>\n",
              "      <td>middle rating</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Toy Story (1995)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n",
              "      <td>1995</td>\n",
              "      <td>13.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>1.331380e+09</td>\n",
              "      <td>high rating</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>Toy Story (1995)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n",
              "      <td>1995</td>\n",
              "      <td>15.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>9.979383e+08</td>\n",
              "      <td>low rating</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Toy Story (1995)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy|Fantasy</td>\n",
              "      <td>1995</td>\n",
              "      <td>19.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.551901e+08</td>\n",
              "      <td>middle rating</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   movieId             title                                       genres  \\\n",
              "0        1  Toy Story (1995)  Adventure|Animation|Children|Comedy|Fantasy   \n",
              "1        1  Toy Story (1995)  Adventure|Animation|Children|Comedy|Fantasy   \n",
              "2        1  Toy Story (1995)  Adventure|Animation|Children|Comedy|Fantasy   \n",
              "3        1  Toy Story (1995)  Adventure|Animation|Children|Comedy|Fantasy   \n",
              "4        1  Toy Story (1995)  Adventure|Animation|Children|Comedy|Fantasy   \n",
              "\n",
              "   year  userId  rating     timestamp          class  \n",
              "0  1995     7.0     3.0  8.518667e+08  middle rating  \n",
              "1  1995     9.0     4.0  9.386292e+08  middle rating  \n",
              "2  1995    13.0     5.0  1.331380e+09    high rating  \n",
              "3  1995    15.0     2.0  9.979383e+08     low rating  \n",
              "4  1995    19.0     3.0  8.551901e+08  middle rating  "
            ]
          },
          "execution_count": 84,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# пункт 4\n",
        "# соединяем две таблицы\n",
        "joined = movies.merge(ratings, on='movieId', how='left')\n",
        "joined.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "11e35521",
      "metadata": {
        "id": "11e35521"
      },
      "outputs": [],
      "source": [
        "# группировка, сортировка\n",
        "joined.groupby('year').mean().sort_values('rating', ascending=False)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c117f163",
      "metadata": {
        "id": "c117f163"
      },
      "source": [
        "### вариант реализации пункта 2 с помощью регулярных выражений"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0f812df6",
      "metadata": {
        "id": "0f812df6"
      },
      "outputs": [],
      "source": [
        "# пункт 2\n",
        "def production_year_regexp(title):\n",
        "    '''выставляет фильму год выпуска'''\n",
        "    y = re.findall(r'\\d{4}', title)\n",
        "    if  y != []:\n",
        "        return y[0]\n",
        "    else:\n",
        "        return '1900'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "be2f1b56",
      "metadata": {
        "id": "be2f1b56",
        "outputId": "5512c7a5-108b-4d6f-d2ad-a248c43fe29f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>movieId</th>\n",
              "      <th>title</th>\n",
              "      <th>genres</th>\n",
              "      <th>year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9025</th>\n",
              "      <td>145150</td>\n",
              "      <td>The Dressmaker (2015)</td>\n",
              "      <td>Comedy|Drama|Thriller</td>\n",
              "      <td>2015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9026</th>\n",
              "      <td>145307</td>\n",
              "      <td>Strictly Business (1991)</td>\n",
              "      <td>Comedy|Romance</td>\n",
              "      <td>1991</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9027</th>\n",
              "      <td>145775</td>\n",
              "      <td>Rubble Kings (2015)</td>\n",
              "      <td>Documentary</td>\n",
              "      <td>2015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9028</th>\n",
              "      <td>145839</td>\n",
              "      <td>Concussion (2015)</td>\n",
              "      <td>Drama</td>\n",
              "      <td>2015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9029</th>\n",
              "      <td>145935</td>\n",
              "      <td>Peanuts Movie, The (2015)</td>\n",
              "      <td>Adventure|Animation|Children|Comedy</td>\n",
              "      <td>2015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9120</th>\n",
              "      <td>162672</td>\n",
              "      <td>Mohenjo Daro (2016)</td>\n",
              "      <td>Adventure|Drama|Romance</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9121</th>\n",
              "      <td>163056</td>\n",
              "      <td>Shin Godzilla (2016)</td>\n",
              "      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9122</th>\n",
              "      <td>163949</td>\n",
              "      <td>The Beatles: Eight Days a Week - The Touring Y...</td>\n",
              "      <td>Documentary</td>\n",
              "      <td>2016</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9123</th>\n",
              "      <td>164977</td>\n",
              "      <td>The Gay Desperado (1936)</td>\n",
              "      <td>Comedy</td>\n",
              "      <td>1936</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9124</th>\n",
              "      <td>164979</td>\n",
              "      <td>Women of '69, Unboxed</td>\n",
              "      <td>Documentary</td>\n",
              "      <td>1900</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      movieId                                              title  \\\n",
              "9025   145150                              The Dressmaker (2015)   \n",
              "9026   145307                           Strictly Business (1991)   \n",
              "9027   145775                                Rubble Kings (2015)   \n",
              "9028   145839                                  Concussion (2015)   \n",
              "9029   145935                          Peanuts Movie, The (2015)   \n",
              "...       ...                                                ...   \n",
              "9120   162672                                Mohenjo Daro (2016)   \n",
              "9121   163056                               Shin Godzilla (2016)   \n",
              "9122   163949  The Beatles: Eight Days a Week - The Touring Y...   \n",
              "9123   164977                           The Gay Desperado (1936)   \n",
              "9124   164979                              Women of '69, Unboxed   \n",
              "\n",
              "                                   genres  year  \n",
              "9025                Comedy|Drama|Thriller  2015  \n",
              "9026                       Comedy|Romance  1991  \n",
              "9027                          Documentary  2015  \n",
              "9028                                Drama  2015  \n",
              "9029  Adventure|Animation|Children|Comedy  2015  \n",
              "...                                   ...   ...  \n",
              "9120              Adventure|Drama|Romance  2016  \n",
              "9121      Action|Adventure|Fantasy|Sci-Fi  2016  \n",
              "9122                          Documentary  2016  \n",
              "9123                               Comedy  1936  \n",
              "9124                          Documentary  1900  \n",
              "\n",
              "[100 rows x 4 columns]"
            ]
          },
          "execution_count": 94,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# пункт 3\n",
        "movies['year'] = movies['title'].apply(production_year_regexp)\n",
        "movies.tail(100)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    },
    "colab": {
      "name": "Pandas. Function & datework.ipynb",
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}